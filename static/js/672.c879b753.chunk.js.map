{"version":3,"file":"static/js/672.c879b753.chunk.js","mappings":"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","sources":["webpack://react-2/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__5XDi1\",\"dialogs_items\":\"Dialogs_dialogs_items__0tupp\",\"item\":\"Dialogs_item__WBIMZ\",\"dialogs_messages\":\"Dialogs_dialogs_messages__ejLql\",\"message\":\"Dialogs_message__T4UEq\",\"active\":\"Dialogs_active__D7Gfq\",\"img_avatar\":\"Dialogs_img_avatar__eJsCx\",\"spanError\":\"Dialogs_spanError__3wL+d\",\"textareaError\":\"Dialogs_textareaError__XZBeF\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n\r\n  return (\r\n\r\n    <li className={s.message}>{props.message}</li>\r\n\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n\r\n  let path = '/dialogs/' + props.id;\r\n  // console.log(props.avatar);\r\n  // console.log(props.id);\r\n  // console.log(props.name);\r\n\r\n  return (\r\n    <li className={s.item}>\r\n      <NavLink className={({ isActive }) => (isActive ? s.active : s.item)} to={path}>\r\n        <img className={s.img_avatar} src={props.avatar} alt=\"avatar\" />\r\n        {props.name}\r\n      </NavLink>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\n\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\n\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { type } from \"@testing-library/user-event/dist/type\";\r\nimport * as Yup from 'yup';\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElement = state.dialogsData.map(\r\n    (dialogElement) => <DialogItem name={dialogElement.name} key={dialogElement.id} id={dialogElement.id} avatar={dialogElement.avatar} />\r\n  );\r\n\r\n  let messageElement = state.messageData.map(\r\n    (messageEl => <Message message={messageEl.message} key={messageEl.id} />)\r\n  )\r\n\r\n  // let newMessageBody = state.newMessageBody;\r\n\r\n  // let onSendMessageClick = () => {\r\n  //   props.sendMessage();\r\n  //   // console.log(props.sendMessage);\r\n  //   // () => {\r\n  //   //   props.store.dispatch((0,_redux_dialogs_reducer__WEBPACK_IMPORTED_MODULE_4__.sendMessageCreator)());\r\n  //   // }\r\n\r\n  // }\r\n  // let onSendMessageClick = () => {\r\n  //   props.sendMessage();\r\n  //   // console.log(props.sendMessage);\r\n  //   // () => {\r\n  //   //   props.store.dispatch((0,_redux_dialogs_reducer__WEBPACK_IMPORTED_MODULE_4__.sendMessageCreator)());\r\n  //   // }\r\n\r\n  // }\r\n\r\n  // let onNewMessageChange = (event) => {\r\n\r\n  //   let body = event.target.value;\r\n  //   props.updateNewMessageBody(body);\r\n  //   // console.log(props.updateNewMessageBody);\r\n  //   // body => {\r\n  //   //   props.store.dispatch((0,_redux_dialogs_reducer__WEBPACK_IMPORTED_MODULE_4__.updateNewMessageBodyCreator)(body));\r\n  //   // }\r\n\r\n  // }\r\n  // ====================================================\r\n  let newName = state.newName;\r\n\r\n  let onSendNameClick = () => {\r\n    // debugger;\r\n    props.sendNameCreator();\r\n\r\n  }\r\n  let onNewNameChange = (event) => {\r\n    let name = event.target.value;\r\n    props.updateNewNameCreator(name);\r\n  }\r\n\r\n  // if (!props.isAuth) return <Navigate to={\"/login\"} />; //для того щоб якщо ми не залогінились нас перекидало на сторінку Залогінитись\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <ul className={s.dialogs_items}>\r\n        {\r\n          dialogsElement\r\n        }\r\n      </ul>\r\n\r\n      <ul className={s.dialogs_messages}>\r\n        <div>\r\n          {messageElement}\r\n        </div>\r\n        <div>\r\n          {/* <div>\r\n            <textarea value={newMessageBody}\r\n              onChange={onNewMessageChange}\r\n              placeholder=\"Enter you message\">\r\n            </textarea>\r\n          </div>\r\n          <div>\r\n            <button onClick={onSendMessageClick}>Send - Надіслати </button>\r\n          </div> */}\r\n          {/* <AddMessageForm onSubmit={addNewMessage} /> */}\r\n          <AddMassageForm sendMessage={props.sendMessage} />\r\n        </div>\r\n\r\n      </ul>\r\n      <div className={s.wrapper_textarea}>\r\n        {/* <textarea\r\n          value={newName}\r\n          onChange={onNewNameChange}\r\n          placeholder=\"Ведіть ім'я\"\r\n          className={s.textarea}>\r\n\r\n        </textarea>\r\n        <button onClick={onSendNameClick} className={s.button}>Додати Ім'я Користувача </button> */}\r\n        <AddNameForm sendName={props.sendNameCreator} />\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst AddMassageForm = (props) => {\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values);\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ newMessageBody: \"\" }}\r\n      onSubmit={(values, { resetForm }) => {\r\n        addNewMessage(values.newMessageBody);\r\n        resetForm({ values: '' });\r\n        // resetForm({ values: { newMessageBody: '111' } });\r\n      }}\r\n      validationSchema={Yup.object({\r\n        newMessageBody: Yup.string()\r\n          .min(5, 'Занадто короткий запис!')\r\n          .max(20, 'Дозволяэться Не більше 20 символів')\r\n          .required('Обов\\'язкове поле!'),\r\n      })}\r\n    >\r\n      {({ errors, touched }) => (\r\n        <Form>\r\n          <div>\r\n            <Field\r\n            className={errors.newMessageBody ? s.textareaError : s.textarea}\r\n              name={'newMessageBody'}\r\n              // as={'textarea'}\r\n              component={'textarea'}\r\n              placeholder={'Введіть повідомлення'}\r\n            />\r\n            <ErrorMessage className={s.spanError} name=\"newMessageBody\" component=\"span\" />\r\n          </div>\r\n\r\n          <button type={'submit'}>Send - Надіслати</button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\n\r\nconst AddNameForm = (props) => {\r\n\r\n  let addNewName = (values) => {\r\n    props.sendName(values);\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ newName: \"\" }}\r\n      onSubmit={(values, { resetForm }) => {\r\n        addNewName(values.newName);\r\n        resetForm({ values: '' });\r\n        // resetForm({ values: { newName: '111' } });\r\n      }}\r\n      validationSchema={Yup.object({\r\n        newName: Yup.string()\r\n          .min(5, 'Занадто короткий запис!')\r\n          .max(20, 'Дозволяэться Не більше 20 символів')\r\n          .required('Обов\\'язкове поле!'),\r\n      })}\r\n    >\r\n      {({ errors, touched }) => (\r\n        <Form>\r\n          <div>\r\n            <Field\r\n              className={errors.newName ? s.textareaError : s.textarea}\r\n              name={'newName'}\r\n              // as={'textarea'}\r\n              component={'textarea'}\r\n              placeholder={'Ведіть ім\\'я'}\r\n            />\r\n            {errors.newName && touched.newName && (\r\n              <div className={s.spanError}>{errors.newName}</div>\r\n            )}\r\n          </div>\r\n\r\n          <button type={'submit'}>Додати Ім'я Користувача</button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { sendMessageCreator, sendNameCreator, updateNewMessageBodyCreator, updateNewNameCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n    // isAuth: state.login.isAuth\r\n  }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    },\r\n    // updateNewMessageBody: (body) => {\r\n    //   dispatch(updateNewMessageBodyCreator(body));\r\n    // },\r\n\r\n    // updateNewNameCreator: (name) => {\r\n    //   dispatch(updateNewNameCreator(name));\r\n    // },\r\n    sendNameCreator: (newName) => {\r\n      dispatch(sendNameCreator(newName));\r\n    }\r\n  }\r\n};\r\n// compose(\r\n//   connect(mapStateToProps, mapDispatchToProps),\r\n//   withAuthRedirect)\r\n//   (Dialogs)\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n// let AuthRedirectComponent = (props) => {\r\n//   if (!props.isAuth) return <Navigate to={\"/login\"} />;\r\n//   return <Dialogs {...props} />\r\n// }\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect)\r\n  (Dialogs);\r\n","import React, { Component } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.login.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to={\"/login\"} />\r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}"],"names":["props","className","s","message","path","id","isActive","to","src","avatar","alt","name","AddMassageForm","initialValues","newMessageBody","onSubmit","values","resetForm","sendMessage","addNewMessage","validationSchema","Yup","min","max","required","errors","touched","component","placeholder","type","AddNameForm","newName","sendName","addNewName","state","dialogsPage","dialogsElement","dialogsData","map","dialogElement","messageElement","messageData","messageEl","sendNameCreator","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","login","Component","RedirectComponent","this","React"],"sourceRoot":""}